AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  backend
  Sample SAM Template for backend
Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Environment:
      Variables:
        ORIGINATION_NUMBER: '+18339471759'
Resources:
  WorkspaceApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: WorkspaceApi
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PATCH, PUT, DELETE, OPTIONS'''
          ResponseTemplates:
            application/json: '''Unauthorized'''
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PATCH, PUT, DELETE, OPTIONS'''
          ResponseTemplates:
            application/json: '''Internal Server Error'''
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /workspace:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addWorkspace.Arn}/invocations
              responses: {}
          /workspace/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getWorkspace.Arn}/invocations
              responses: {}
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${updateWorkspace.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteWorkspace.Arn}/invocations
              responses: {}
          /workspace/all:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllUserWorkspaces.Arn}/invocations
              responses: {}
          /workspace/deploy/{id}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deployWorkspace.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
        AllowMethods: '''GET, POST, PATCH, PUT, DELETE, OPTIONS'''
      Auth:
        DefaultAuthorizer: JWTAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          JWTAuthorizer:
            FunctionArn: !GetAtt JWTAuthorizerFunction.Arn
  getWorkspace:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getWorkspace
      CodeUri: src/getWorkspace
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          WORKSPACESTABLE_TABLE_NAME: !Ref WorkspacesTable
          WORKSPACESTABLE_TABLE_ARN: !GetAtt WorkspacesTable.Arn
          WORKSPACESBUCKET_BUCKET_NAME: !Ref WorkspacesBucket
          WORKSPACESBUCKET_BUCKET_ARN: !GetAtt WorkspacesBucket.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${WorkspacesBucket}
                - !Sub arn:${AWS::Partition}:s3:::${WorkspacesBucket}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspacesTable
      Events:
        WorkspaceApiGETworkspaceid:
          Type: Api
          Properties:
            Path: /workspace/{id}
            Method: GET
            RestApiId: !Ref WorkspaceApi
  getWorkspaceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getWorkspace}
  addWorkspace:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: addWorkspace
      CodeUri: src/addWorkspace
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        WorkspaceApiPOSTworkspace:
          Type: Api
          Properties:
            Path: /workspace
            Method: POST
            RestApiId: !Ref WorkspaceApi
      Environment:
        Variables:
          WORKSPACESTABLE_TABLE_NAME: !Ref WorkspacesTable
          WORKSPACESTABLE_TABLE_ARN: !GetAtt WorkspacesTable.Arn
          WORKSPACESBUCKET_BUCKET_NAME: !Ref WorkspacesBucket
          WORKSPACESBUCKET_BUCKET_ARN: !GetAtt WorkspacesBucket.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${WorkspacesBucket}
                - !Sub arn:${AWS::Partition}:s3:::${WorkspacesBucket}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspacesTable
  addWorkspaceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${addWorkspace}
  updateWorkspace:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: updateWorkspace
      CodeUri: src/updateWorkspace
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          WORKSPACESTABLE_TABLE_NAME: !Ref WorkspacesTable
          WORKSPACESTABLE_TABLE_ARN: !GetAtt WorkspacesTable.Arn
          WORKSPACESBUCKET_BUCKET_NAME: !Ref WorkspacesBucket
          WORKSPACESBUCKET_BUCKET_ARN: !GetAtt WorkspacesBucket.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${WorkspacesBucket}
                - !Sub arn:${AWS::Partition}:s3:::${WorkspacesBucket}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspacesTable
      Events:
        WorkspaceApiPUTworkspaceid:
          Type: Api
          Properties:
            Path: /workspace/{id}
            Method: PUT
            RestApiId: !Ref WorkspaceApi
  updateWorkspaceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${updateWorkspace}
  deleteWorkspace:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: deleteWorkspace
      CodeUri: src/deleteWorkspace
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          WORKSPACESTABLE_TABLE_NAME: !Ref WorkspacesTable
          WORKSPACESTABLE_TABLE_ARN: !GetAtt WorkspacesTable.Arn
          WORKSPACESBUCKET_BUCKET_NAME: !Ref WorkspacesBucket
          WORKSPACESBUCKET_BUCKET_ARN: !GetAtt WorkspacesBucket.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${WorkspacesBucket}
                - !Sub arn:${AWS::Partition}:s3:::${WorkspacesBucket}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspacesTable
      Events:
        WorkspaceApiDELETEworkspaceid:
          Type: Api
          Properties:
            Path: /workspace/{id}
            Method: DELETE
            RestApiId: !Ref WorkspaceApi
  deleteWorkspaceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${deleteWorkspace}
  WorkspacesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  WorkspacesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-workspace-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  WorkspacesBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WorkspacesBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt WorkspacesBucket.Arn
              - !Sub ${WorkspacesBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  WelcomeTemplate:
    Type: AWS::Pinpoint::SmsTemplate
    Properties:
      TemplateName: WelcomeTemplate
      Body: Hello, Ethan! - From Ethan
  AutoSmsPinpointApp:
    Type: AWS::Pinpoint::App
    Properties:
      Name: AutoSmsPinpointApp
  AutoSmsChannel:
    Type: AWS::Pinpoint::SMSChannel
    Properties:
      ApplicationId: !Ref AutoSmsPinpointApp
  ConversationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-conversat-${AWS::AccountId}
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: alias/aws/s3
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ConversationBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ConversationBucket
      PolicyDocument:
        Id: RequireEncryptionInTransit
        Version: '2012-10-17'
        Statement:
          - Principal: '*'
            Action: '*'
            Effect: Deny
            Resource:
              - !GetAtt ConversationBucket.Arn
              - !Sub ${ConversationBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: 'false'
  ConversationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  getConversation:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getConversation
      CodeUri: src/getConversation
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          CONVERSATIONTABLE_TABLE_NAME: !Ref ConversationTable
          CONVERSATIONTABLE_TABLE_ARN: !GetAtt ConversationTable.Arn
          CONVERSATIONBUCKET_BUCKET_NAME: !Ref ConversationBucket
          CONVERSATIONBUCKET_BUCKET_ARN: !GetAtt ConversationBucket.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${ConversationBucket}
                - !Sub arn:${AWS::Partition}:s3:::${ConversationBucket}/*
      Events:
        ConversationApiGETconversationid:
          Type: Api
          Properties:
            Path: /conversation/{id}
            Method: GET
            RestApiId: !Ref ConversationApi
  getConversationLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getConversation}
  ConversationApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: ConversationApi
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /conversation/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getConversation.Arn}/invocations
              responses: {}
          /conversation:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllConversations.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addDummyConversationData.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
        AllowOrigin: '''*'''
        AllowMethods: '''GET, POST'''
      Auth:
        Authorizers:
          JWTAuthorizer:
            UserPoolArn: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/placeholder
  getAllConversations:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getAllConversations
      CodeUri: src/getAllConversations
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          CONVERSATIONTABLE_TABLE_NAME: !Ref ConversationTable
          CONVERSATIONTABLE_TABLE_ARN: !GetAtt ConversationTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationTable
      Events:
        ConversationApiGETconversation:
          Type: Api
          Properties:
            Path: /conversation
            Method: GET
            RestApiId: !Ref ConversationApi
  getAllConversationsLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getAllConversations}
  addDummyConversationData:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: addDummyConversationData
      CodeUri: src/addDummyConversationData
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ConversationApiPOSTconversation:
          Type: Api
          Properties:
            Path: /conversation
            Method: POST
            RestApiId: !Ref ConversationApi
      Environment:
        Variables:
          CONVERSATIONTABLE_TABLE_NAME: !Ref ConversationTable
          CONVERSATIONTABLE_TABLE_ARN: !GetAtt ConversationTable.Arn
          CONVERSATIONBUCKET_BUCKET_NAME: !Ref ConversationBucket
          CONVERSATIONBUCKET_BUCKET_ARN: !GetAtt ConversationBucket.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConversationTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:GetObjectAcl
                - s3:GetObjectLegalHold
                - s3:GetObjectRetention
                - s3:GetObjectTorrent
                - s3:GetObjectVersion
                - s3:GetObjectVersionAcl
                - s3:GetObjectVersionForReplication
                - s3:GetObjectVersionTorrent
                - s3:ListBucket
                - s3:ListBucketMultipartUploads
                - s3:ListBucketVersions
                - s3:ListMultipartUploadParts
                - s3:AbortMultipartUpload
                - s3:DeleteObject
                - s3:DeleteObjectVersion
                - s3:PutObject
                - s3:PutObjectLegalHold
                - s3:PutObjectRetention
                - s3:RestoreObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${ConversationBucket}
                - !Sub arn:${AWS::Partition}:s3:::${ConversationBucket}/*
  addDummyConversationDataLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${addDummyConversationData}
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - email
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AutoVerifiedAttributes:
        - email
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - USER_PASSWORD_AUTH
  getUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getUser
      CodeUri: src/getUser
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        UserApiGETuser:
          Type: Api
          Properties:
            Path: /user
            Method: GET
            RestApiId: !Ref UserApi
  getUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getUser}
  addUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: addUser
      CodeUri: src/addUser
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
          BOT_ID: !Ref CellyBot
      Events:
        UserApiPOSTuser:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId: !Ref UserApi
  addUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${addUser}
  deleteUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: deleteUser
      CodeUri: src/deleteUser
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Events:
        UserApiDELETEuser:
          Type: Api
          Properties:
            Path: /user
            Method: DELETE
            RestApiId: !Ref UserApi
  deleteUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${deleteUser}
  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: UserApi
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /user:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addUser.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getUser.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteUser.Arn}/invocations
              responses: {}
          /user/confirm:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${confirmUser.Arn}/invocations
              responses: {}
          /user/resend_code:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resendCodeUser.Arn}/invocations
              responses: {}
          /user/login:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${loginUser.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
        AllowMethods: '''POST, PUT, GET, DELETE'''
  confirmUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: confirmUser
      CodeUri: src/confirmUser
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        UserApiPOSTuserconfirm:
          Type: Api
          Properties:
            Path: /user/confirm
            Method: POST
            RestApiId: !Ref UserApi
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
  confirmUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${confirmUser}
  loginUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: loginUser
      CodeUri: src/loginUser
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        UserApiPOSTuserlogin:
          Type: Api
          Properties:
            Path: /user/login
            Method: POST
            RestApiId: !Ref UserApi
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
  loginUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${loginUser}
  resendCodeUser:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: resendCodeUser
      CodeUri: src/resendCodeUser
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        UserApiPOSTuserresendcode:
          Type: Api
          Properties:
            Path: /user/resend_code
            Method: POST
            RestApiId: !Ref UserApi
      Environment:
        Variables:
          USERPOOLCLIENT_USER_POOL_CLIENT_ID: !Ref UserPoolClient
  resendCodeUserLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${resendCodeUser}
  JWTAuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: JWTAuthorizerFunction
      CodeUri: src/jwtAuthFunction
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          USER_POOL_REGION: !Ref AWS::Region
  JWTAuthorizerFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${JWTAuthorizerFunction}
  getAllUserWorkspaces:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getAllUserWorkspaces
      CodeUri: src/getAllUserWorkspaces
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        WorkspaceApiGETworkspaceall:
          Type: Api
          Properties:
            Path: /workspace/all
            Method: GET
            RestApiId: !Ref WorkspaceApi
      Environment:
        Variables:
          WORKSPACESTABLE_TABLE_NAME: !Ref WorkspacesTable
          WORKSPACESTABLE_TABLE_ARN: !GetAtt WorkspacesTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspacesTable
  getAllUserWorkspacesLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getAllUserWorkspaces}
  CellyBot:
    Type: AWS::Lex::Bot
    Properties:
      IdleSessionTTLInSeconds: 300
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots_34K6AS1XY81
      Name: CellyBot
      DataPrivacy:
        ChildDirected: false
  PinpointLexFunctionIamRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PinpointLexFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: Pinpoint
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sms-voice:SendTextMessage
                Resource: '*'
        - PolicyName: Lex
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lex:PostContent
                  - lex:PostText
                  - lex:RecognizeText
                Resource: !Sub arn:aws:lex:${AWS::Region}:${AWS::AccountId}:bot-alias/STPJGYCE7A/3VMZOZI7RH
  PinpointLexFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: PinpointLexFunction
      CodeUri: src/PinpointLexFunction
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Role: !GetAtt PinpointLexFunctionIamRole.Arn
      Events:
        SNS1:
          Type: SNS
          Properties:
            Topic: !Ref SNSTopic1
  SNSTopic1:
    Type: AWS::SNS::Topic
  PinpointLexFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${PinpointLexFunction}
  deployWorkspace:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: deployWorkspace
      CodeUri: src/deployWorkspace
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          WORKSPACESTABLE_TABLE_NAME: !Ref WorkspacesTable
          WORKSPACESTABLE_TABLE_ARN: !GetAtt WorkspacesTable.Arn
          BOT_ID: !Ref CellyBot
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspacesTable
      Events:
        WorkspaceApiPOSTworkspacedeployid:
          Type: Api
          Properties:
            Path: /workspace/deploy/{id}
            Method: POST
            RestApiId: !Ref WorkspaceApi
  deployWorkspaceLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${deployWorkspace}
  SchedulingApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: SchedulingApi
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /scheduling/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAvailability.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addCalendarEvent.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
        AllowOrigin: '''*'''
        AllowMethods: '''*'''
        AllowHeaders: '''*'''
  getAvailability:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getAvailability
      CodeUri: src/getAvailability
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        SchedulingApiGETschedulingid:
          Type: Api
          Properties:
            Path: /scheduling/{id}
            Method: GET
            RestApiId: !Ref SchedulingApi
  getAvailabilityLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getAvailability}
  addCalendarEvent:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: addCalendarEvent
      CodeUri: src/addCalendarEvent
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        SchedulingApiPOSTschedulingid:
          Type: Api
          Properties:
            Path: /scheduling/{id}
            Method: POST
            RestApiId: !Ref SchedulingApi
  addCalendarEventLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${addCalendarEvent}
  ExternalServiceLinkApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: ExternalServiceLinkApi
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PATCH, PUT, DELETE, OPTIONS'''
          ResponseTemplates:
            application/json: '''Unauthorized'''
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: '''*'''
              Access-Control-Allow-Headers: '''*'''
              Access-Control-Allow-Methods: '''GET, POST, PATCH, PUT, DELETE, OPTIONS'''
          ResponseTemplates:
            application/json: '''Internal Server Error'''
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /esl/microsoft:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${initializeMicrosoftESL.Arn}/invocations
              responses: {}
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${storeTokenMicrosoftESL.Arn}/invocations
              responses: {}
          /esl/microsoft/token_status:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getMicrosoftTokenStatus.Arn}/invocations
              responses: {}
          /esl/unlink/all:
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${unlinkAllESL.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        MaxAge: 5
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
        AllowMethods: '''GET, POST, PATCH, PUT, DELETE, OPTIONS'''
      Auth:
        DefaultAuthorizer: JWTAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          JWTAuthorizer:
            FunctionArn: !GetAtt JWTAuthorizerFunction.Arn
  initializeMicrosoftESL:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: initializeMicrosoftESL
      CodeUri: src/initializeMicrosoftESL
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ExternalServiceLinkApiGETeslmicrosoft:
          Type: Api
          Properties:
            Path: /esl/microsoft
            Method: GET
            RestApiId: !Ref ExternalServiceLinkApi
  initializeMicrosoftESLLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${initializeMicrosoftESL}
  storeTokenMicrosoftESL:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: storeTokenMicrosoftESL
      CodeUri: src/storeTokenMicrosoftESL
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ExternalServiceLinkApiPOSTeslmicrosoft:
          Type: Api
          Properties:
            Path: /esl/microsoft
            Method: POST
            RestApiId: !Ref ExternalServiceLinkApi
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:CreateSecret
                - secretsmanager:UpdateSecret
                - secretsmanager:DescribeSecret
                - secretsmanager:RotateSecret
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
        - LambdaInvokePolicy:
            FunctionName: !Ref rotateMicrosoft
      Environment:
        Variables:
          ROTATEMICROSOFT_FUNCTION_NAME: !Ref rotateMicrosoft
          ROTATEMICROSOFT_FUNCTION_ARN: !GetAtt rotateMicrosoft.Arn
  storeTokenMicrosoftESLLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${storeTokenMicrosoftESL}
  getMicrosoftTokenStatus:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getMicrosoftTokenStatus
      CodeUri: src/getMicrosoftTokenStatus
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ExternalServiceLinkApiGETeslmicrosofttokenstatus:
          Type: Api
          Properties:
            Path: /esl/microsoft/token_status
            Method: GET
            RestApiId: !Ref ExternalServiceLinkApi
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
  getMicrosoftTokenStatusLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getMicrosoftTokenStatus}
  PublicExternalServiceApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${AWS::StackName}
        - ResourceName: PublicExternalServiceApi
      StageName: Prod
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /pesl/microsoft/calendar/{workspace_id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getMicrosoftCalendarEvents.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowOrigin: '''*'''
        AllowHeaders: '''*'''
        AllowMethods: '''*'''
        MaxAge: 5
  getMicrosoftCalendarEvents:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: getMicrosoftCalendarEvents
      CodeUri: src/getMicrosoftCalendarEvents
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        PublicExternalServiceApiGETpeslmicrosoftcalendarworkspaceid:
          Type: Api
          Properties:
            Path: /pesl/microsoft/calendar/{workspace_id}
            Method: GET
            RestApiId: !Ref PublicExternalServiceApi
      Environment:
        Variables:
          WORKSPACESTABLE_TABLE_NAME: !Ref WorkspacesTable
          WORKSPACESTABLE_TABLE_ARN: !GetAtt WorkspacesTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref WorkspacesTable
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
  getMicrosoftCalendarEventsLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${getMicrosoftCalendarEvents}
  rotateMicrosoft:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: rotateMicrosoft
      CodeUri: src/rotateMicrosoft
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
  rotateMicrosoftLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${rotateMicrosoft}
  unlinkAllESL:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub
        - Stack ${AWS::StackName} Function ${ResourceName}
        - ResourceName: unlinkAllESL
      CodeUri: src/unlinkAllESL
      Handler: handler.handler
      Runtime: python3.9
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Events:
        ExternalServiceLinkApiDELETEeslunlinkall:
          Type: Api
          Properties:
            Path: /esl/unlink/all
            Method: DELETE
            RestApiId: !Ref ExternalServiceLinkApi
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:UpdateSecret
              Resource:
                - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*
  unlinkAllESLLogGroup:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Sub /aws/lambda/${unlinkAllESL}
Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Workspace Api
      Members:
        - getWorkspace
        - addWorkspace
        - updateWorkspace
        - deleteWorkspace
        - getAllUserWorkspaces
        - deployWorkspace
    Group2:
      Label: Pinpoint SMS Service
      Members:
        - WelcomeTemplate
        - AutoSmsChannel
        - AutoSmsPinpointApp
    Group3:
      Label: Conversation Api
      Members:
        - getAllConversations
        - getConversation
        - addDummyConversationData
    Group4:
      Label: Users
      Members:
        - addUser
        - deleteUser
        - getUser
        - confirmUser
        - resendCodeUser
        - loginUser
    Group5:
      Label: Users Cognito
      Members:
        - UserPoolClient
        - UserPool
    Group6:
      Label: Scheduling
      Members:
        - getAvailability
        - addCalendarEvent
    Group7:
      Label: External Service Link
      Members:
        - storeTokenMicrosoftESL
        - getMicrosoftTokenStatus
        - initializeMicrosoftESL
        - unlinkAllESL
    Group8:
      Label: Public External Services
      Members:
        - getMicrosoftCalendarEvents
  Outputs:
    WokspaceApi:
      Description: Workspace API
      Value: !Ref WorkspaceApi
    UserApi:
      Description: User API
      Value: !Ref UserApi